// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "faba_traning_project/internal/models"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, orderItem
func (_m *Repository) Create(ctx context.Context, orderItem models.OrderItem) (models.OrderItem, error) {
	ret := _m.Called(ctx, orderItem)

	var r0 models.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderItem) models.OrderItem); ok {
		r0 = rf(ctx, orderItem)
	} else {
		r0 = ret.Get(0).(models.OrderItem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.OrderItem) error); ok {
		r1 = rf(ctx, orderItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListOrderItem provides a mock function with given fields: ctx, tx, listOrderItem
func (_m *Repository) CreateListOrderItem(ctx context.Context, tx *sql.Tx, listOrderItem []models.OrderItem) error {
	ret := _m.Called(ctx, tx, listOrderItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, []models.OrderItem) error); ok {
		r0 = rf(ctx, tx, listOrderItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t NewRepositoryT) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
